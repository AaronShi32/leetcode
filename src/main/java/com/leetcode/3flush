# LinkedList
[A/TC: O(1)]725. Split Linked List in Parts
[A/TC: O(1) one pass]328. Odd Even Linked List
[R: leaf node condition]109. Convert Sorted List to Binary Search Tree
[A/TC: O(1)]86. Partition List
[A][P 3指针加反转]92. Reverse Linked List II
[A 奇数链merge条件][涉及到的解法比较好, 知识点比较多]143. Reorder List
[A/TC: O(nlogn)][归并排序]148. Sort List
[R-][区间反转]25.Reverse Nodes in k-Group

# Backtracking
[visited, 重复 (条件)continue, 排序才能 i - 1]Permutations II, Subsets II
[A][A][reuse]Combination Sum
[A]Generate Parentheses
[A/2 dfs 返回 false 的案例/visited]Word Search, Word Search II
[memorise]Word Break II


# BFS
# BFS 不仅可以用 queue.isEmpty() 做外循环条件, 还可以用解的状态做, 未达到某种状态说明还未搜索到
[BFS, 改变某位字符的使用]784. Letter Case Permutation
[外层条件] 17. Letter Combinations of a Phone Number
[树的层次遍历问题集合]513. Find Bottom Left Tree Value[A: BFS from right to left, last node is leftmost]
                    /199. Binary Tree Right Side View[A: BFS from right to left]
                    /515. Find Largest Value in Each Tree Row[A: 层找最大/小均用 Integer.MIN_VALUE/MAX_VALUE 初始化]
                    /111. Minimum Depth of Binary Tree[A: 判断叶子节点返回 len]
                    /103. Binary Tree Zigzag Level Order Traversal[A: BFS + zag 变量]
                    /637. Average of Levels in Binary Tree [A: double sum = 0.0]
[前处理 Map 再 BFS] 815.Bus Routes

# Graph
[A: 判断有向图是否有环 --> 拓扑排序][Topological Sorting 拓扑排序: 生成图, 统计入度, 选择入度为0的点进行BFS]207. Course Schedule
[A][Topological Sorting 拓扑排序: 记录值]285. Course Schedule II



# DFS
[find(记录节点和parent映射, Map) + dfs(三个方向)]863. All Nodes Distance K in Binary Tree
[FloodFill算法]200. Number of Islands[A if(){dfs(); ans++}]
              /[A]695. Max Area Of Island 用 area = dfs(...) 标记返回, 是 dfs 返回值的好案例
              /463. Island Perimeter 计算边数: islands * 4 - neighbours * 2
[很经典的DFS, 跟 Islands 差不多]547. Friend Circles



# BST
[中序遍历解决一切]285.Inorder Successor in BST
                /[A, 递归会高效一些]783. Minimum Distance Between BST Nodes
                /[A]230. Kth Smallest Element in a BST
                /[A]98. Validate Binary Search Tree(pre != null && pre.val > root.val)
[最优算法: dfs, 自实现: 前序遍历 + map + 记录最大值]501. Find Mode in Binary Search Tree

# Tree
[递归/BFS]101.Symmetric Tree
[A][map + queue]235. Lowest Common Ancestor
[路径和系列: I && II 是根到叶子, III 是中间任意节点和]

[A: 递归, 三句] 112. Path Sum
/[A: if(满足条件){ add to ans }else{dfs(left and right)} remove(size - 1)]113. Path Sum II
/[Map: preSum + dfs]437. Path Sum III
/124.Binary Tree Maximum Path Sum
[BFS: ColumnTreeNode + Map<column, List<TreeNode>>] 314.Binary Tree Vertical Order Traversal


# Base 基础算法
[A][l <= r, r = nums.length - 1]704. Binary Search
[A][二分搜索: x - arr[mid] > arr[mid + k] - x]658. Find K Closest Elements
[A]LRU Cache

# String
[while, set, i, j, 从头remove, 加入时取max]3.Longest Substring Without Repeating Characters
[A: Array.sort(String[]) 长度由小到大][排序, 首尾相比]14.Longest Common Prefix

# Reverse 类型
[A][r = r * 10 + x % 10 || x = x / 10]7. Reverse Integer

# 应用类
[int step = x & -x]751. IP to CIDR

# 双指针 Two Point
[Sum 类, 先排序, 降维, 跳重]15. 3Sum[A 优化点 nums[i] > 0 break]
                          /16. 3Sum Closest(判断closest并记录)[A 优化点: 跳重 98.51%]
                          /18. 4Sum (四次跳重)
                          /925. Long Name Pressed(双指针 + need差量)

# Array
[双 Math.max 记录 当前和起点(Math.max(cur + next, next), 记录最大和)]53. Maximum Subarray

# 区间合并
[A][先排序, 找第一个作为基准 start 和 end, 遍历(interval.start <= end 取 max(end)), add 最后一个区间]56.Merge Intervals
[3个遍历, 1. intervals.get(i).end < newInterval.start 2. intervals.get(i).start <= newInterval.end]57.Insert Interval
[A: 注意任务的排序顺序: (a, b) -> a.getValue() != b.getValue() ? b.getValue() - a.getValue() : a.getKey() - b.getKey()]621. Task Scheduler

# 链表合并
[A: 递归(99%) mergeK -> merge2 || 最小堆(33%) pq ]23. Merge k Sorted Lists
[A: 掌握递归写法, 四个 return]21. Merge Two Sorted Lists


# Top K
pq用的比较器: Comparator.comparingInt(o -> o.intValue()) 升序
              Comparator.comparingInt(o -> -o.intValue()) 降序

[A: bucket[]效率高/PQ效率低][Map + (Array(List<Integer>[], O(n)) or PQ(按次数降序, O(nlogn)))]347. Top K Frequent Elements
[A][Map + PQ(比较条件 a.getValue() == b.getValue() ? b.getKey().compareTo(a.getKey()): (b.getValue() - a.getValue()))]692. Top K Frequent Words


# 第 K 个
[A][QuickSelect 快选算法(partition): poivt = nums[(left + right)/2], while 判断 no equal, k <= right, k >= left]215.Kth Largest Element in an Array/Kth Smaller Element in an Array


# 双记录 cur, max
[A: cur = Math.max(nums[i], cur + nums[i]); max = Math.max(cur, max);]53. Maximum Subarray

# 最长子串
[A: if contains(remove from begin char) else(add, max, j++)]3. Longest Substring Without Repeating Characters
[A: 分治法: build map 统计次数, 选择次数小于k的字符作为 filter, split 分割然后递归]395. Longest Substring with At Least K Repeating Characters

# Anagrams
[A: 利用 Anagrams 特性, 排序后的单词一致, Map 映射进行 group]49. Group Anagrams

# 矩阵相关
[A: O(m + n) 左下角出发]74. Search a 2D Matrix
[A: O(m + n) 右上角出发]240. Search a 2D Matrix II


# 数字类
402. Remove K Digits

# 二分: 旋转数组类
[旋转N次]153. Find Minimum in Rotated Sorted Array
[旋转一次][先区分段(lo,mid,hi)再区分边界(target, mid, lo(hi))]33. Search in Rotated Sorted Array
